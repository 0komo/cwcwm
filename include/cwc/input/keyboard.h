#ifndef _CWC_INPUT_KEYBOARD_H
#define _CWC_INPUT_KEYBOARD_H

#include <wayland-util.h>
#include <wlr/types/wlr_input_device.h>
#include <xkbcommon/xkbcommon.h>

#include "cwc/util.h"

struct cwc_server;

struct cwc_keyboard_group {
    struct cwc_seat *seat;
    struct wlr_keyboard_group *wlr_kbd_group;

    struct wl_listener modifiers_l;
    struct wl_listener key_l;

    struct wl_listener config_commit_l; // for native
};

struct cwc_keyboard {
    struct cwc_seat *seat;
    struct wlr_keyboard *wlr;

    struct wl_listener modifiers_l;
    struct wl_listener key_l;
};

struct cwc_virtual_keyboard {
    struct cwc_keyboard *base;

    struct wl_listener destroy_l;
};

struct cwc_keyboard_group *cwc_keyboard_group_create(struct cwc_seat *seat,
                                                     bool virtual);

void cwc_keyboard_group_destroy(struct cwc_keyboard_group *kbd_group);

void cwc_keyboard_group_add_device(struct cwc_keyboard_group *kbd_group,
                                   struct wlr_input_device *device);

struct wlr_surface;
void keyboard_focus_surface(struct cwc_seat *seat, struct wlr_surface *surface);

//================== KEYBINDING ====================

enum cwc_keybind_type {
    CWC_KEYBIND_TYPE_LUA,
    CWC_KEYBIND_TYPE_C,
};

struct cwc_keybind_info {
    enum cwc_keybind_type type;
    uint64_t key;
    char *description;
    char *group;
    union {
        void (*on_press)(void *args);
        int luaref_press;
    };
    union {
        void (*on_release)(void *args);
        int luaref_release;
    };
    void *args;
    bool exclusive; // execute keybind even when locked or inhibited
};

/* function which start with double underscore is the low level function.
 * the function without underscore prefix is just a wrapper around the
 * low level function that point to the default map on the global server struct.
 */

/* the key is 8 bytes length generated by combining the 4 bytes of modifiers and
 * 4 bytes of the keysym */
uint64_t keybind_generate_key(uint32_t modifiers, uint32_t key);
void __keybind_register(struct cwc_hhmap *map,
                        uint32_t modifiers,
                        uint32_t key,
                        struct cwc_keybind_info info);
void keybind_kbd_register(uint32_t modifiers,
                          xkb_keysym_t key,
                          struct cwc_keybind_info info);
void keybind_mouse_register(uint32_t modifiers,
                            uint32_t key,
                            struct cwc_keybind_info info);

void __keybind_remove_if_exist(struct cwc_hhmap *map, uint64_t generated_key);
void keybind_kbd_remove(uint32_t modifiers, xkb_keysym_t key);
void keybind_mouse_remove(uint32_t modifiers, xkb_keysym_t key);

bool __keybind_execute(struct cwc_keybind_info *info,
                       uint32_t modifiers,
                       xkb_keysym_t key,
                       bool press);
/* true if a keybind entry found/processed */
bool keybind_kbd_execute(struct cwc_seat *seat,
                         uint32_t modifiers,
                         xkb_keysym_t key,
                         bool press);
bool keybind_mouse_execute(uint32_t modifiers, uint32_t button, bool press);

void keybind_kbd_clear(bool clear_common_key);
void keybind_mouse_clear();

void dump_keybinds_info();

void keybind_register_common_key();

#endif // !_CWC_INPUT_KEYBOARD_H
